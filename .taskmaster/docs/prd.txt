# Product Requirements Document - Dailies Web Interface

## Executive Summary

Following the successful modular content classification refactor, this PRD outlines the development of a comprehensive web interface for the Dailies content curation system. The system has evolved from binary classification (Political vs General) to a sophisticated 9-category modular system, requiring a unified web interface built with HTMX + Express.js.

## Project Overview

**Current State**: Backend modular classification system with 9 content categories is complete
**Goal**: Build unified web interface for content management, system monitoring, and configuration
**Technology Stack**: Express.js + EJS templates + HTMX + Tailwind CSS + Chart.js
**Architecture**: Server-side rendered with HTMX for dynamic interactions

## Epic 1: Dashboard Page Foundation
**Primary Focus**: System overview and monitoring interface

### User Stories:
- As a user, I want to see recent content captures organized by category so I can quickly understand what content has been processed
- As a user, I want to view real-time processing statistics (captures per day/week, success rates) so I can monitor system health  
- As a user, I want to see AI provider usage and costs (Gemini/OpenAI/Anthropic) so I can track expenses
- As a user, I want to view category distribution charts so I can understand content patterns
- As a user, I want to see processing pipeline status for recent content so I can identify any issues
- As a user, I want quick access to failed classifications for manual review
- As a user, I want to see top domains by capture volume to understand content sources

### Technical Requirements:
- Server-side rendered EJS templates with Express.js routing
- Chart.js integration for data visualizations 
- HTMX for real-time data updates without full page reloads
- Responsive design using Tailwind CSS (CDN)
- PostgreSQL queries for dashboard metrics

## Epic 2: Content Management Interface
**Primary Focus**: Content discovery, filtering, and bulk operations

### User Stories:
- As a user, I want to search content across all 9 categories using full-text search so I can find specific articles
- As a user, I want to filter content by category, date range, source domain, and quality score so I can narrow down results
- As a user, I want to see content in a paginated list with key metadata (title, category, date, source) for easy browsing
- As a user, I want to select multiple content items for bulk operations (delete, reprocess, change category) to manage content efficiently
- As a user, I want to sort content by date, quality score, or category for different viewing preferences
- As a user, I want to see classification confidence scores and AI provider used for transparency
- As a user, I want to export selected content to CSV/JSON for external analysis
- As a user, I want to see content processing status (successful, failed, in-progress) with error details
- As a user, I want to save custom filter combinations as presets for repeated use
- As a user, I want to see related content suggestions based on similarity
- As a user, I want to flag content for manual review or follow-up

### Technical Requirements:
- PostgreSQL full-text search integration
- HTMX-powered filtering and pagination without page reloads
- Bulk operation confirmation dialogs
- Progress indicators for long-running operations
- CSV/JSON export functionality

## Epic 3: Content Detail Modal
**Primary Focus**: Individual content examination and editing

### User Stories:
- As a user, I want to view full content details including raw text, summary, and extracted metadata
- As a user, I want to see all AI processing results (bias analysis, quality scores, extracted entities) in an organized layout
- As a user, I want to manually override AI classification if the category is incorrect
- As a user, I want to edit content metadata (title, summary, key points) to improve accuracy
- As a user, I want to see the classification reasoning and confidence score to understand AI decisions
- As a user, I want to view action execution results for each category-specific processor
- As a user, I want to reprocess content with different AI providers or settings
- As a user, I want to add manual notes or annotations to content items
- For political content, I want to see bias analysis, quality scores, and loaded language detection
- For tech content, I want to see extracted technologies, tools, and trend analysis
- For 3D printing content, I want to see print settings, model classification, and file information
- For sports content, I want to see extracted statistics, teams, and players

### Technical Requirements:
- Modal/overlay implementation using HTMX
- Form handling for content editing with validation
- Real-time feedback and error handling
- Category-specific result display components

## Epic 4: Configuration Management
**Primary Focus**: System settings and AI provider management

### User Stories:
- As a user, I want to configure AI provider settings (API keys, model selection, fallback order) for classification control
- As a user, I want to manage content categories (add, edit, disable) to customize the classification system
- As a user, I want to configure category aliases for better classification accuracy
- As a user, I want to manage domain matchers to provide classification hints
- As a user, I want to set email delivery preferences (SMTP settings, templates) for digest distribution
- As a user, I want to configure action execution settings for each category
- As a user, I want to set system performance parameters (timeouts, retry limits)
- As a user, I want to manage user accounts and permissions for multi-user scenarios
- As a user, I want to test AI provider connectivity and view response times
- As a user, I want to see cost tracking per provider and set budget alerts
- As a user, I want to configure model-specific parameters for each provider
- As a user, I want to create new content categories with custom actions
- As a user, I want to reorder category priorities for classification preference
- As a user, I want to see category statistics and adjust settings accordingly

### Technical Requirements:
- Secure form handling for sensitive data like API keys
- Real-time configuration validation
- Configuration backup/restore functionality
- Audit logging for configuration changes

## Epic 5: Analytics Dashboard
**Primary Focus**: System insights and performance monitoring

### User Stories:
- As a user, I want to view content trends by category over time to understand information patterns
- As a user, I want to monitor AI classification accuracy and confidence scores for system optimization
- As a user, I want to track processing costs and usage patterns across AI providers
- As a user, I want to see system performance metrics (processing time, error rates) for health monitoring
- As a user, I want to analyze content source patterns and domain reliability
- As a user, I want to export analytics data for external reporting
- As a user, I want to see correlation analysis between content characteristics and engagement
- As a user, I want to identify content quality trends and outliers
- As a user, I want to monitor digest performance and reader engagement
- As a user, I want to set up automated alerts for system anomalies

### Technical Requirements:
- Interactive Chart.js visualizations
- Data export functionality (CSV, JSON)
- Real-time metric updates using HTMX
- Configurable dashboard widgets

## Epic 6: Digest Management
**Primary Focus**: Daily digest creation and scheduling

### User Stories:
- As a user, I want to view past digests in a calendar layout so I can see digest history
- As a user, I want to manually trigger digest generation for any date range
- As a user, I want to preview digest content before sending to review formatting and content selection
- As a user, I want to edit digest sections (add/remove content, modify summaries) for customization
- As a user, I want to see digest generation status and any errors that occurred
- As a user, I want to configure digest frequency and delivery schedule
- As a user, I want to see digest analytics (open rates, click rates) if email delivery is enabled
- As a user, I want to regenerate digests with different content selection criteria
- As a user, I want to create themed digests (e.g., tech-only, politics-only) for targeted audiences
- As a user, I want to set content quality thresholds for digest inclusion
- As a user, I want to exclude specific sources or categories from digests

### Technical Requirements:
- Calendar widget integration
- Markdown preview and editing capabilities
- Drag-and-drop content organization
- Email preview functionality

## Technical Architecture

### Backend Integration:
- Build on existing Express.js server structure
- Utilize existing PostgreSQL database with modular classification tables
- Integrate with existing Redis caching layer
- Connect to existing job processing system

### Frontend Technology:
- EJS templates for server-side rendering
- HTMX for dynamic interactions without JavaScript frameworks
- Tailwind CSS via CDN for styling (no build process)
- Chart.js for data visualizations
- Minimal custom JavaScript only where necessary

### Development Approach:
- Page-by-page incremental development
- Manual testing after each feature
- Git commits for each working increment
- Focus on working software over comprehensive documentation

## Implementation Phases

### Phase 1: Dashboard Foundation
Build core dashboard with navigation and basic monitoring

### Phase 2: Content Management
Implement content browsing, search, and bulk operations

### Phase 3: Content Detail Modal
Add individual content viewing and editing capabilities

### Phase 4: Configuration Interface
Build system configuration and AI provider management

### Phase 5: Analytics Dashboard
Implement reporting and performance monitoring

### Phase 6: Digest Management
Add digest creation and scheduling functionality

## Success Criteria

- Unified web interface replaces need for direct database access
- All 9 content categories properly represented in UI
- HTMX provides smooth user experience without page reloads
- Configuration changes can be made through web interface
- System monitoring and analytics available through dashboard
- Content management operations (search, filter, edit) work efficiently
- Integration with existing backend systems maintains data integrity

## Future Considerations

- Mobile-responsive design for tablet/phone access
- API endpoints for potential future integrations
- User role management for multi-user scenarios
- Advanced analytics and reporting features
- Integration with external tools (Obsidian, note-taking apps)

This PRD serves as the foundation for TaskMaster task generation and represents the comprehensive web interface needed to complete the Dailies content curation system.